#lang scheme
(define (element-of-set? x set)
  (cond ((null? set) false)
        ((= x (car set)) true)
        ((< x (car set)) false)
        (else (element-of-set? x (cdr set)))))

(define (intersection-set set1 set2)
  (if (or (null? set1) (null? set2))
    '()
    (let ((x1 (car set1)) (x2 (car set2)))
      (cond ((= x1 x2)
             (cons x1 (intersection-set (cdr set1)
                                        (cdr set2))))
            ((< x1 x2)
             (intersection-set (cdr set1) set2))
            ((< x2 x1)
             (intersection-set set1 (cdr set2)))))))

(define (remove-element x set)
  (define (iter s removed-set bool)
    (cond (bool (append removed-set s))
          ((= (car s) x)
           (iter (cdr s) removed-set #t))
          (else (iter (cdr s) (cons (car s) removed-set) #f))))
    (iter set '() #f))

(define (adjoin-set x set)
  (display set) (newline)
  (cond ((null? set) (list x))
        ((= (car set) x) set)
        ((> (car set) x) (cons x set))
        (else (cons (car set) (adjoin-set x (cdr set))))))

(define (union-set set1 set2)
  (cond ((null? set1) set2)
         ((null? set2) set1)
         (else (let ((x1 (car set1))
                     (x2 (car set2)))
                 (cond ((> x1 x2) (cons x2 (union-set set1 (cdr set2))))
                       ((< x1 x2) (cons x1 (union-set (cdr set1) set2)))
                       (else (cons x1 (union-set (cdr set1) (cdr set2)))))))))

(union-set '(1 2 3 4 5) '(0 5 6 7 8 9))

