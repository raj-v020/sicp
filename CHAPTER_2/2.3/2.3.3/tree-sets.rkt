#lang scheme
(require "list-to-tree.rkt")
(require "tree-to-list.rkt")

(define (entry tree) (car tree))
(define (left-branch tree) (cadr tree))
(define (right-branch tree) (caddr tree))
(define (make-tree entry left right)
  (list entry left right))

(define (element-of-set? x set)
  (cond ((null? set) false)
        ((= x (entry set)) true)
        ((< x (entry set))
         (element-of-set? x (left-branch set)))
        ((> x (entry set))
         (element-of-set? x (right-branch set)))))

(define (adjoin-set x set)
  (cond ((null? set) (make-tree x '() '()))
        ((= x (entry set)) set)
        ((< x (entry set))
         (list->tree (tree->list-2 (make-tree (entry set)
                    (adjoin-set x (left-branch set))
                    (right-branch set)))))
        ((> x (entry set))
         (list->tree (tree->list-2 (make-tree (entry set) (left-branch set)
                    (adjoin-set x (right-branch set))))))))

(define (intersection-set set1 set2)
  (define (intersection-list list1 list2)
    (if (or (null? list1) (null? list2)) '()
      (let ((x1 (car list1))
            (x2 (car list2)))
        (cond ((= x1 x2) (cons x1 (intersection-list (cdr list1)
                                                     (cdr list2))))
              ((< x1 x2) (intersection-list (cdr list1) list2))
              (else (intersection-list list1 (cdr list2)))))))
  (list->tree (intersection-list (tree->list-2 set1) 
                                 (tree->list-2 set2))))

(define (union-set set1 set2)
  (define (union-list list1 list2)
    (cond ((null? list1) list2)
          ((null? list2) list1)
          (else
      (let ((x1 (car list1))
            (x2 (car list2)))
        (cond ((= x1 x2) (cons x1 (union-list (cdr list1)
                                                     (cdr list2))))
              ((< x1 x2) (cons x1 (union-list (cdr list1) list2)))
              (else (cons x2 (union-list list1 (cdr list2)))))))))
  (list->tree (union-list (tree->list-2 set1) 
                                 (tree->list-2 set2))))

(define list1 '(1 3 5 7 8 10 11 12 13))
(define list2 '(1 5 6 7 8 10 11 12 13 15 16))
(define tree1 (list->tree list1))
(define tree2 (list->tree list2))

(tree->list-2 (union-set tree1 tree2))
(provide (all-defined-out)) 
