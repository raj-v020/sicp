#lang scheme

(define *the-table* (make-hash))
(define (put key1 key2 value) (hash-set! *the-table* (list key1 key2) value))
(define (get key1 key2) (hash-ref *the-table* (list key1 key2) #f))

(define (square x) (if (number? x) (* (contents x) (contents x)) (square (/ (numer x) (denom x)))))
(define (sine x) (sin (if (number? x) (contents x) (sine (/ (numer x) (denom x))))))
(define (cosine x) (cos (if (number? x) (contents x) (sine (/ (numer x) (denom x))))))
(define (arctan x y) (atan (if (number? x) x (/ (numer x) (denom x)))
                           (if (number? y) y (/ (numer y) (denom y)))))

(define (map-list l1 l2)
  (if (null? l1) '() (cons (list (car l1) (car l2)) (map-list (cdr l1) (cdr l2)))))

(define (apply-list l)
  (map (lambda (sub-l)
         (apply (car sub-l) (cdr sub-l))) l))

(define (list-ref x items)
  (if (equal? (car items) x)
      0
      (+ 1 (list-ref x (cdr items)))))
(define (compose f g) (lambda (x) (f (g x))))

(define (repeated f n)
  (define (repeatedi g i)
    (if (= i n) g (repeatedi (lambda (x) ((compose f g) x)) (+ i 1))))
  (repeatedi f 1))

(define (member? item x)
  (cond ((null? x) false)
        ((eq? item (car x)) #t)
        (else (member? item (cdr x)))))

(define tower '(integer rational real complex polynomial))
(define operations '(add sub mul div))

(define (attach-tag type-tag contents)
  (cons type-tag contents))

(define (type-tag datum)
  (cond ((pair? datum) (car datum))
        ((number? datum) 'integer)
        (else
         (error "Bad tagged datum: TYPE-TAG" datum))))

(define (contents datum)
  (cond ((pair? datum) (cdr datum))
        ((number? datum) datum)
        (else
         (error "Bad tagged datum: CONTENTS" datum))))


(define (install-scheme-number-package)
  (define (raise-integer n)
    (make-rational n 1))
  (define (project-integer n)
    n)
  (put 'add '(integer integer) +)
  (put 'sub '(integer integer) -)
  (put 'mul '(integer integer) *)
  (put 'div '(integer integer) /)
  (put 'negation '(integer) -)
  (put 'raise '(integer) raise-integer)
  (put 'project '(integer) project-integer)
  (put 'equal? '(integer integer) =)
  (put '=zero? '(integer) zero?)
  'done)

(define (install-rational-package)
  (define (numer x) (car x))
  (define (denom x) (cdr x))
  (define (make-rat n d)
    (let ((g (gcd n d)))
      (cons (/ n g) (/ d g))))
  (define (add-rat x y)
    (make-rat (+ (* (numer x) (denom y))
                 (* (numer y) (denom x)))
              (* (denom x) (denom y))))
  (define (sub-rat x y)
    (make-rat (- (* (numer x) (denom y))
                 (* (numer y) (denom x)))
              (* (denom x) (denom y))))
  (define (mul-rat x y)
    (make-rat (* (numer x) (numer y))
              (* (denom x) (denom y))))
  (define (div-rat x y)
    (make-rat (* (numer x) (denom y))
              (* (denom x) (numer y))))
  (define (tag x) (attach-tag 'rational x))
  (define (equal-rational? x y)
    (= (* (numer x) (denom y))
       (* (numer y) (denom x))))
  (define (=zero? x)
    (and (= (numer x) 0)
         (not (= (denom x) 0))))
  (define (raise-rational x)
    (make-real (/ (numer x) (denom x))))
  (define (project-rational x)
    (numer x))

  (put 'add '(rational rational)
       (lambda (x y) (tag (add-rat x y))))
  (put 'sub '(rational rational)
       (lambda (x y) (tag (sub-rat x y))))
  (put 'mul '(rational rational)
       (lambda (x y) (tag (mul-rat x y))))
  (put 'div '(rational rational)
       (lambda (x y) (tag (div-rat x y))))
  (put 'negation '(rational) (lambda (x) (tag (make-rat (- (numer x)) (denom x)))))
  (put 'make 'rational
       (lambda (n d) (tag (make-rat n d))))
  (put 'numer '(rational) numer)
  (put 'denom '(rational) denom)
  (put 'raise '(rational) raise-rational)
  (put 'project '(rational) project-rational)
  (put 'equal? '(rational rational) equal-rational?)
  (put '=zero? '(rational) =zero?)
  'done)

(define (numer x)
  (apply-generic 'numer x))
(define (denom x)
  (apply-generic 'denom x))
(define (make-rational n d)
  ((get 'make 'rational) n d))

(define (install-real-package)
  (define (tag x) (attach-tag 'real x))
  (define (raise-real x)
    (make-complex-from-real-imag (contents x) 0))
  (define (project-real x)
    (round x))
  (put 'add '(real real) +)
  (put 'sub '(real real) -)
  (put 'mul '(real real) *)
  (put 'div '(real real) /)
  (put 'negation '(real) -)
  (put 'make 'real (lambda (x) (tag (* 1.0 x))))
  (put 'equal? '(real real) (lambda (x y) (= x y)))
  (put '=zero? '(real) (lambda (x) (= x 0)))
  (put 'raise '(real) raise-real)
  (put 'project '(real) project-real)
  'done)

(define (make-real x)
  ((get 'make 'real) (if (number? x) x (/ (numer x) (denom x)))))

(define (install-rectangular-package)
  (define (real-part z) (car z))
  (define (imag-part z) (cdr z))
  (define (make-from-real-imag x y) (cons x y))
  (define (magnitude z)
    (sqrt (+ (square (real-part z))
             (square (imag-part z)))))
  (define (angle z)
    (arctan (imag-part z) (real-part z)))
  (define (make-from-mag-ang r a)
    (cons (* r (cosine a)) (* r (sine a))))
  (define (tag x) (attach-tag 'rectangular x))
  (put 'real-part '(rectangular) real-part)
  (put 'imag-part '(rectangular) imag-part)
  (put 'magnitude '(rectangular) magnitude)
  (put 'angle '(rectangular) angle)
  (put 'negation '(rectangular) (lambda (z) (tag (make-from-real-imag (- (real-part z))
                                                                      (- (imag-part z))))))
  (put 'make-from-real-imag 'rectangular
       (lambda (x y) (tag (make-from-real-imag x y))))
  (put 'make-from-mag-ang 'rectangular
       (lambda (r a) (tag (make-from-mag-ang r a))))
  'done)

(define (install-polar-package)
  (define (magnitude z) (contents (car z)))
  (define (angle z) (cdr z))
  (define (make-from-mag-ang r a) (cons r a))
  (define (real-part z) (* (magnitude z) (cosine (angle z))))
  (define (imag-part z) (* (magnitude z) (sine (angle z))))
  (define (make-from-real-imag x y)
    (cons (sqrt (+ (square x) (square y)))
          (arctan y x)))
  (define (tag x) (attach-tag 'polar x))
  (put 'real-part '(polar) real-part)
  (put 'imag-part '(polar) imag-part)
  (put 'magnitude '(polar) magnitude)
  (put 'angle '(polar) angle)
  (put 'negation '(polar) (lambda (z) (tag (make-from-mag-ang (- (magnitude z))
                                                              (angle z)))))
  (put 'make-from-real-imag 'polar
       (lambda (x y) (tag (make-from-real-imag x y))))
  (put 'make-from-mag-ang 'polar
       (lambda (r a) (tag (make-from-mag-ang r a))))
  'done)

(define (real-part z) (apply-generic 'real-part z))
(define (imag-part z) (apply-generic 'imag-part z))
(define (magnitude z) (apply-generic 'magnitude z))
(define (angle z) (apply-generic 'angle z))
(define (equ? num1 num2) (apply-generic 'equal? num1 num2))
(define (=zero? num) (apply-generic '=zero? num))

(define (make-from-real-imag x y)
  ((get 'make-from-real-imag 'rectangular) x y))
(define (make-from-mag-ang r a)
  ((get 'make-from-mag-ang 'polar) r a))

(define (add x y) (apply-generic 'add x y))
(define (sub x y) (apply-generic 'sub x y))
(define (mul x y) (apply-generic 'mul x y))
(define (div x y) (apply-generic 'div x y))
(define (negate num) (apply-generic 'negation num))

(define (install-complex-package)
  (define (make-from-real-imag x y)
    ((get 'make-from-real-imag 'rectangular) x y))
  (define (make-from-mag-ang r a)
    ((get 'make-from-mag-ang 'polar) r a))
  (define (add-complex z1 z2)
    (make-from-real-imag (add (real-part z1) (real-part z2))
                         (add (imag-part z1) (imag-part z2))))
  (define (sub-complex z1 z2)
    (make-from-real-imag (sub (real-part z1) (real-part z2))
                         (sub (imag-part z1) (imag-part z2))))
  (define (mul-complex z1 z2)
    (make-from-mag-ang (mul (magnitude z1) (magnitude z2))
                       (add (angle z1) (angle z2))))
  (define (div-complex z1 z2)
    (make-from-mag-ang (div (magnitude z1) (magnitude z2))
                       (sub (angle z1) (angle z2))))
  (define (equal-complex? z1 z2)
    (and (equ? (real-part z1) (real-part z2))
         (equ? (imag-part z1) (imag-part z2))))
  (define (=zero? z)
    (= (magnitude z) 0))
  (define (raise-complex z)
    (tag z))
  (define (project-complex z)
    (make-real (real-part z)))
  (define (tag z) (attach-tag 'complex z))
  (put 'add '(complex complex)
       (lambda (z1 z2) (tag (add-complex z1 z2))))
  (put 'sub '(complex complex)
       (lambda (z1 z2) (tag (sub-complex z1 z2))))
  (put 'mul '(complex complex)
       (lambda (z1 z2) (tag (mul-complex z1 z2))))
  (put 'div '(complex complex)
       (lambda (z1 z2) (tag (div-complex z1 z2))))
  (put 'make-from-real-imag 'complex
       (lambda (x y) (tag (make-from-real-imag x y))))
  (put 'make-from-mag-ang 'complex
       (lambda (r a) (tag (make-from-mag-ang r a))))
  (put 'real-part '(complex) real-part)
  (put 'imag-part '(complex) imag-part)
  (put 'magnitude '(complex) magnitude)
  (put 'angle '(complex) angle)
  (put 'raise '(complex) raise-complex)
  (put 'project '(complex) project-complex)
  (put 'negation '(complex) (lambda (z) (tag (apply-generic 'negation z))))
  (put 'equal? '(complex complex) equal-complex?)
  (put '=zero? '(complex) =zero?)
  'done)

(define (make-complex-from-real-imag x y)
  ((get 'make-from-real-imag 'complex) x y))
(define (make-complex-from-mag-ang r a)
  ((get 'make-from-mag-ang 'complex) r a))

(install-rectangular-package)
(install-polar-package)
(install-complex-package)
(install-rational-package)
(install-real-package)
(install-scheme-number-package)

(define *table-2* (make-hash))
(define (put-coercion key1 key2 value) (hash-set! *table-2* (list key1 key2) value))
(define (get-coercion key1 key2) (hash-ref *table-2* (list key1 key2) #f))

(define (apply-generic op . args)
  (define (show-error type-tags)
    (error "No method for these types" (list op type-tags)))

  (define (successive-raise lower-type higher-type)
    (let ((height-diff (- (list-ref higher-type tower) (list-ref lower-type tower))))
      (cond ((higher? lower-type higher-type) #f)
            ((eq? lower-type higher-type) (lambda (x) x))
            (else (repeated raise height-diff)))))

  (define (coerce-type type type-tags)
    (define (iter tags coerced-types)
      (cond ((null? tags) coerced-types)
            ((successive-raise (car tags) type) (iter (cdr tags)
                                                      (append coerced-types
                                                              (list (successive-raise (car tags) type)))))
            (else #f)))
    (iter type-tags '()))

  (define (coerce-args type-tags)
    (define (iter current-type)
      (cond ((null? current-type) #f)
            ((coerce-type (car current-type) type-tags) (apply-list (map-list (coerce-type (car current-type)
                                                                                           type-tags)
                                                                              args)))
            (else (iter (cdr current-type)))))
    (iter type-tags))

  (define (coerced? type-tags)
    (define (iter first-type tags)
      (cond ((null? tags) #t)
            ((eq? first-type (car tags)) (iter first-type (cdr tags)))
            (else #f)))
    (iter (car type-tags) (cdr type-tags)))

  (let ((type-tags (map type-tag args)))
    (let ((proc (get op type-tags)))
      (if proc
          (if (member? op operations)
              (drop (apply proc (map contents args)))
              (apply proc (map contents args)))
          (if (not (coerced? type-tags))
              (let ((coerced-args (coerce-args type-tags)))
                (if coerced-args
                    (apply apply-generic (append (list op) coerced-args))
                    (show-error type-tags)))
              (show-error type-tags))))))

(define (higher? x y)
  (if (> (list-ref x tower) (list-ref y tower)) #t #f))

(define (raise num)
  (apply-generic 'raise num))

(define (project num)
  (apply-generic 'project num))

(define (drop num)
  (cond ((eq? (type-tag num) 'integer) num)
        ((eq? (type-tag num) 'polynomial) num)
        (else (let ((raised-project-num (raise (project num))))
                (if (equ? num raised-project-num)
                    (drop (project num))
                    num)))))

(define (install-sparse-polynomial-package)
  (define (make-poly variable term-list)
    (cons variable term-list))
  (define (order term) (car term))
  (define (coeff term) (cdr term))
  (define (adjoin-term term term-list)
    (if (=zero? (coeff term))
        term-list
        (cons term term-list)))
  (define (first-term term-list) (car term-list))
  (define (rest-terms term-list) (tag (cdr term-list)))
  (define (tag p) (attach-tag 'sparse p))
  (put 'make-sparse 'sparse (lambda (var term-list) (make-poly var (tag term-list))))
  (put 'adjoin-term 'sparse (lambda (term term-list) (tag (adjoin-term term term-list))))
  (put 'first-term '(sparse) first-term)
  (put 'rest-terms '(sparse) rest-terms)
  'done)

(define (install-dense-polynomial-package)
  (define (make-poly variable term-list)
    (cons variable term-list))
  (define (order term) (car term))
  (define (coeff term) (cdr term))
  (define (adjoin-term term term-list)
    (cond ((=zero? (coeff term)) term-list)
          ((= (order term) (length term-list)) (cons (coeff term) term-list))
          (else (adjoin-term term (cons 0 term-list)))))
  (define (first-term term-list) (cons (- (length term-list) 1) (car term-list)))
  (define (rest-terms term-list) (tag (cdr term-list)))
  (define (tag p) (attach-tag 'dense p))
  (put 'make-dense 'dense (lambda (var term-list) (make-poly var (tag term-list))))
  (put 'adjoin-term 'dense (lambda (term term-list) (tag (adjoin-term term term-list))))
  (put 'first-term '(dense) first-term)
  (put 'rest-terms '(dense) rest-terms)
  'done)

(define (install-polynomial-package)
  (define (make-sparse-polynomial variable term-list)
    ((get 'make-sparse 'sparse) variable term-list))
  (define (make-dense-polynomial variable term-list)
    ((get 'make-dense 'dense) variable term-list))
  (define (make-polynomial variable term-list)
    (cons variable term-list))
  (define (variable p) (car p))
  (define (term-list p) (cdr p))                             
  (define (variable? x) (symbol? x))
  (define (order term) (car term))
  (define (coeff term) (cdr term))
  (define (make-term order coeff) (cons order coeff))
  (define (same-variable? v1 v2)
    (and (variable? v1) (variable? v2) (eq? v1 v2)))
  (define (zero-poly? p)
    (empty-termlist? (term-list p)))
 
  ;(define (the-empty-termlist) '()) 
  (define (empty-termlist? term-list) (null? (cdr term-list)))
  
  (define (add-poly p1 p2)
    (if (same-variable? (variable p1) (variable p2))
                (make-polynomial (variable p1)
                                 (add-terms (term-list p1) (term-list p2)))
        (error "Polys not in same var: ADD-POLY" (list p1 p2))))
  (define (add-terms L1 L2)
    (cond ((empty-termlist? L1) L2)
          ((empty-termlist? L2) L1)
          (else
           (let ((t1 (first-term L1))
                 (t2 (first-term L2)))
             (cond ((> (order t1) (order t2))
                    (adjoin-term
                     t1 (add-terms (rest-terms L1) L2)))
                   ((< (order t1) (order t2))
                    (adjoin-term
                     t2 (add-terms L1 (rest-terms L2))))
                   (else
                    (adjoin-term
                     (make-term (order t1)
                                (add (coeff t1) (coeff t2)))
                     (add-terms (rest-terms L1)
                                (rest-terms L2)))))))))
  
  (define (sub-poly p1 p2)
    (add (tag p1) (negate (tag p2))))
  (define (mul-poly p1 p2)
    (if (same-variable? (variable p1) (variable p2))
        (make-polynomial (variable p1)
                               (mul-terms (term-list p1) (term-list p2)))
        (error "Polys not in same var: MUL-POLY" (list p1 p2))))
  
  (define (mul-terms L1 L2)
    (if (empty-termlist? L1)
        L1
        (add-terms (mul-term-by-all-terms (first-term L1) L2)
                   (mul-terms (rest-terms L1) L2))))
  (define (mul-term-by-all-terms t1 L)
    (if (empty-termlist? L)
        L
        (let ((t2 (first-term L)))
          (adjoin-term
           (make-term (+ (order t1) (order t2))
                      (mul (coeff t1) (coeff t2)))
           (mul-term-by-all-terms t1 (rest-terms L))))))
  (define (negate-poly L)
    (if (empty-termlist? L)
        L
        (adjoin-term (make-term (order (first-term L))
                                (negate (coeff (first-term L))))
                     (negate-poly (rest-terms L)))))
  (define (tag p) (attach-tag 'polynomial p))
  (put 'add '(polynomial polynomial)
       (lambda (p1 p2) (tag (add-poly p1 p2))))
  (put 'sub '(polynomial polynomial) sub-poly)
  (put 'mul '(polynomial polynomial)
       (lambda (p1 p2) (tag (mul-poly p1 p2))))
  (put 'negation '(polynomial) (lambda (p) (tag (make-polynomial (variable p) (negate-poly (term-list p))))))
  (put '=zero? '(polynomial) zero-poly?)
  (put 'make-sparse 'polynomial
       (lambda (var terms) (tag (make-sparse-polynomial var terms))))
  (put 'make-dense 'polynomial
       (lambda (var terms) (tag (make-dense-polynomial var terms))))
  'done)

(install-sparse-polynomial-package)
(install-dense-polynomial-package)
(install-polynomial-package)


(define (make-sparse-poly var coeffs)
  ((get 'make-sparse 'polynomial) var coeffs))
(define (make-dense-poly var coeffs)
  ((get 'make-dense 'polynomial) var coeffs))

(define (adjoin-term term term-list)
  ((get 'adjoin-term (type-tag term-list)) term (cdr term-list)))
(define (first-term term-list) (apply-generic 'first-term term-list))
(define (rest-terms term-list) (apply-generic 'rest-terms term-list))

(define list1 (list (cons 100 1) (cons 2 -1) (cons 1 2)))
(define list2 (list (cons 3 2) (cons 2 2) (cons 1 3)))

(define p1 (make-sparse-poly 'x list1))
(define p2 (make-sparse-poly 'x list2))
(define list3 (list (cons 3 p1) (cons 2 3) (cons 1 p2)))
(define p3 (make-sparse-poly 'y list3))
(define list4 (list (cons 3 p2) (cons 2 2) (cons 1 p1)))
(define p4 (make-sparse-poly 'y list4))
(define list5 '())
(define p5 (make-sparse-poly 'x list5))

(define list6 (list 5 0 6))
(define list7 (list 4 2 5))
(define list8 '())
(define p6 (make-dense-poly 'x list6))
(define p7 (make-dense-poly 'x list7))
(define p8 (make-dense-poly 'x list8))





