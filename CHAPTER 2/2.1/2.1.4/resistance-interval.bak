#lang sicp

(define (make-interval a b)
  (cons (min a b) (max b)))
(define (lower-bound i)
  (car i))
(define (upper-bound i)
  (cdr i))

(define (add-interval x y)
  (make-interval (+ (lower-bound x) (lower-bound y))
                 (+ (upper-bound x) (upper-bound y))))

(define (mul-interval x y)
  (let ((lx (lower-bound x))
        (ux (upper-bound x))
        (ly (lower-bound y))
        (uy (upper-bound y)))
    (let ((p1 (* lx ly))
           (p2 (* lx uy))
           (p3 (* ux ly))
           (p4 (* ux uy)))
       (make-interval (min p1 p2 p3 p4)
                      (max p1 p2 p3 p4)))))

(define (div-interval x y)
  (if (= (upper-bound y) (lower-bound y)) (error "DIVISION by ZERO interval")
      (mul-interval
       x
       (make-interval (/ 1.0 (upper-bound y))
                      (/ 1.0 (lower-bound y))))))

(define (sub-interval x y)
  (make-interval (- (lower-bound y) (lower-bound x))
                 (- (upper-bound y) (upper-bound x))))

(define (width i)
  (/ (- (upper-bound i) (lower-bound i)) 2.0))

(define i1 (make-interval 2 9))
(define i2 (make-interval -6 5))

(define addi (add-interval i1 i2))
(display addi) (newline) (width addi) (newline)

(define subi (sub-interval i1 i2))
(display subi) (newline) (width subi) (newline)

(define muli (mul-interval i1 i2))
(display muli) (newline) (width muli) (newline)

(define divi (div-interval i1 i2))
(display divi) (newline) (width divi) (newline)
(width i1)
(width i2)