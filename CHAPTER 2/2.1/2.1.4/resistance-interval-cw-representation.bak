#lang sicp

(define (opposite-pairs? a b)
  (if (> a 0) (< b 0) (> b 0)))
(define (positive-pairs? a b)
  (if (opposite-pairs? a b) #f (> a 0)))
(define (negative-pairs? a b)
  (if (opposite-pairs? a b) #f (< a 0)))

(define (make-interval c w)
  (cons (min (- c w) (+ c w))
        (max (- c w) (+ c w))))
(define (show-interval i)
  (cons (center i) (width i)))
(define (lower-bound i)
  (car i))
(define (upper-bound i)
  (cdr i))

(define (width i)
  (/ (- (upper-bound i) (lower-bound i)) 2.0))

(define (center i)
  (+ (lower-bound i) (width i)))

(define (make-width lb ub)
  (/ (- ub lb) 2.0))

(define (make-center lb ub)
  (+ lb (make-width lb ub)))

(define (add-interval x y)
  (make-interval (make-center (+ (lower-bound x) (lower-bound y))
                              (+ (upper-bound x) (upper-bound y)))
                 (make-width (+ (lower-bound x) (lower-bound y))
                             (+ (upper-bound x) (upper-bound y)))))

(define (o-mul-interval x y)
  (let ((lx (lower-bound x))
        (ux (upper-bound x))
        (ly (lower-bound y))
        (uy (upper-bound y)))
    (let ((p1 (* lx ly))
          (p2 (* lx uy))
          (p3 (* ux ly))
          (p4 (* ux uy)))
      (make-interval (make-center (min p1 p2 p3 p4)
                                  (max p1 p2 p3 p4))
                     (make-width (min p1 p2 p3 p4)
                                 (max p1 p2 p3 p4))))))

(define (mul-interval x y)
  (let ((lx (lower-bound x))
        (ux (upper-bound x))
        (ly (lower-bound y))
        (uy (upper-bound y)))
    (cond ((positive-pairs? lx ux) (cond ((positive-pairs? ly uy)
                                          (make-interval (make-center (* lx ly) (* ux uy))
                                                         (make-width (* lx ly) (* ux uy))))
                                         ((negative-pairs? ly uy)
                                          (make-interval (make-center (* ux ly) (* lx uy))
                                                         (make-width (* ux ly) (* lx uy))))
                                         (else
                                          (make-interval (make-center (* ux ly) (* ux uy))
                                                         (make-width (* ux ly) (* ux uy))))))
          
          ((negative-pairs? lx ux) (cond ((positive-pairs? ly uy)
                                          (make-interval (make-center (* lx uy) (* ux ly))
                                                         (make-width (* lx uy) (* ux ly))))
                                         ((negative-pairs? ly uy)
                                          (make-interval (make-center (* ux uy) (* lx ly))
                                                         (make-width (* ux uy) (* lx ly))))
                                         (else
                                          (make-interval (make-center (* lx uy) (* lx ly))
                                                         (make-width (* lx uy) (* lx ly))))))
          
          (else (cond ((positive-pairs? ly uy)
                       (make-interval (make-center (* lx uy) (* ux uy))
                                      (make-width (* lx uy) (* ux uy))))
                      ((negative-pairs? ly uy)
                       (make-interval (make-center (* ux ly) (* lx ly))
                                      (make-width (* ux ly) (* lx ly))))
                      (else
                       (make-interval (make-center (min (* lx uy) (* ux ly))
                                                   (max (* lx ly) (* ux uy)))
                                      (make-width (min (* lx uy) (* ux ly))
                                                  (max (* lx ly) (* ux uy))))))))))

(define (div-interval x y)
  (if (= (upper-bound y) (lower-bound y)) (error "DIVISION by ZERO interval")
      (mul-interval
       x
       (make-interval (make-center (/ 1.0 (upper-bound y)) (/ 1.0 (lower-bound y)))
                      (make-width (/ 1.0 (upper-bound y)) (/ 1.0 (lower-bound y)))))))

(define (sub-interval x y)
  (make-interval (make-center (- (lower-bound y) (lower-bound x))
                              (- (upper-bound y) (upper-bound x)))
                 (make-width (- (lower-bound y) (lower-bound x))
                             (- (upper-bound y) (upper-bound x)))))

(define i1 (make-interval -3.5 5.5))
(define i2 (make-interval 0.5 5.5))

(define addi (add-interval i1 i2))
(define subi (sub-interval i1 i2))
(define muli (mul-interval i1 i2))
(define divi (div-interval i1 i2))

(define (show-data f)
  (display " center-width form: ") (display (show-interval f)) (newline)
  (display " bound form: ") (display f) (newline))

(show-data addi) (newline)
(show-data subi) (newline)
(show-data muli) (newline)
(show-data divi)
(display "______________________________________") (newline) (newline)
(show-data i1) (newline)
(show-data i2) (newline)



