#lang sicp

(define (make-queue)
  (let ((front-ptr '())
        (rear-ptr '()))
    (define (set-fp item) (set! front-ptr item))
    (define (set-rp item) (set! rear-ptr item))
    (define (empty?) (null? front-ptr))
    (define (fq) (car front-queue))
    (define (insert new-pair) (cond ((empty?) (set-fp new-pair)
                                              (set-rp new-pair)
                                              (print))
                                    (else (set-cdr! rear-ptr new-pair)
                                          (set-rp new-pair)
                                          (print))))
    (define (delete) (cond ((empty?) (error "DELETE! called with an empty queue" (print)))
                           (else (set-fp (cdr front-ptr))
                                 (print))))
    (define (print) front-ptr)
    (define (dispatch m)
      (cond ((eq? m 'get-fp) front-ptr)
            ((eq? m 'get-rp) rear-ptr)
            ((eq? m 'set-fp) set-fp)
            ((eq? m 'set-rp) set-rp)
            ((eq? m 'empty?) empty?)
            ((eq? m 'fq) fq)
            ((eq? m 'insert) insert)
            ((eq? m 'delete) delete)
            ((eq? m 'print) print)
            (else (error "QUEUE wrong dispatch message, MESSAGE: " m))))
    dispatch))

(define (front-ptr queue)
  (queue 'get-fp))
(define (rear-ptr queue)
  (queue 'get-rp))
(define (set-front-ptr! queue item)
  ((queue 'set-fp) item))
(define (set-rear-ptr! queue item)
  ((queue 'set-rp) item))
(define (empty-queue? queue)
  (queue 'empty?))
(define (front-queue queue)
  (if (empty-queue? queue)
      (error "FRONT called with an empty queue" (print-queue queue))
      (queue 'fq)))
(define (insert-queue! queue item)
  ((queue 'insert) (cons item '())))
(define (delete-queue! queue)
  ((queue 'delete)))
(define (print-queue queue)
  ((queue 'print)))

(define q1 (make-queue))
(insert-queue! q1 'a)
(insert-queue! q1 'b)
(delete-queue! q1)
(delete-queue! q1)
