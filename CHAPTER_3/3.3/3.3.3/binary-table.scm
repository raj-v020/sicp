#lang sicp

(define (make-tree entry left right)
  (list entry left right))
(define (left-branch tree)
  (cadr tree))
(define (right-branch tree)
  (caddr tree))
(define (node tree)
  (car tree))
(define (node-key node)
  (car node))
(define (node-value node)
  (cdr node))
(define (set-node-value! node value)
  (set-cdr! node value))
(define (set-right! tree right)
  (set-car! (cddr tree) right))
(define (set-left! tree left)
  (set-car! (cdr tree) left))

(define (make-table)
  (define (assoc key records)
    (if (null? records)
	#f
	(let ((current_node (node records)))
          (let ((current_key (node-key current_node))
                (current_left (left-branch records))
                (current_right (right-branch records)))
	  (cond ((= current_key key) current_node)
		((< current_key key) (assoc key current_right))
		(else (assoc key current_left)))))))

(let ((local-table (list '*table*)))

  (define (lookup keys)
    (define (iter k-list table)
      (if (null? k-list)
	  table
	  (if (null? table)
	      (error "Given empty table: LOOKUP")
	      (let ((subtable (assoc (car k-list) table)))
                (if subtable
                    (iter (cdr k-list) (node-value subtable))
                    (error "Entry not found in the given records: LOOKUP" (car k-list) table))))))
    (iter keys (cdr local-table)))

  (define (insert! keys value)
    (define (iter k-list table)
      (let ((records (node-value table)))
	(cond ((not (list? records)) (set-node-value! table value))
              ((null? records) (set-cdr! table (create-table keys value)))
              (else (let ((record (assoc (car k-list) records)))
                      (if record
                          (iter (cdr k-list) record)
                          (create-record k-list value records)))))
        'ok))
    (iter keys local-table))

  (define (create-record keys value records)
    (let ((current_node (node records)))
      (let ((current_key (node-key current_node))
            (current_left (left-branch records))
            (current_right (right-branch records)))
        (cond ((> (car keys) current_key)
               (if (null? current_right)
                   (set-right! records (make-tree (cons (car keys) (create-table (cdr keys) value))
                                                  '()
                                                  '()))                                   
                   (create-record keys value current_right)))
              (else
               (if (null? current_left)
                   (set-left! records (make-tree (cons (car keys) (create-table (cdr keys) value))
                                                 '()
                                                 '()))
                   (create-record keys value current_left)))))))
  
  (define (create-table keys value)
      (if (null? keys)
          value
          (list (cons (car keys) (create-table (cdr keys) value))
                '()
                '())))
    
    (define (dispatch m)
      (cond ((eq? m 'lookup-proc) lookup)
            ((eq? m 'insert-proc!) insert!)
            (else (error "Unknown operation: TABLE" m))))
    dispatch))

(define operation-table (make-table))
(define get (operation-table 'lookup-proc))
(define put (operation-table 'insert-proc!))

#|(put (list 1 2 1) 100)
(get (list 1 2 1))
(put (list 1 2 1) 98)
(get (list 1 2 1))
(put (list 2 3) 10)
(put (list 1 3 5 4) 90)
(put (list 4) 1)
(get (list 1 3 5 4))
(get (list 4))|#

